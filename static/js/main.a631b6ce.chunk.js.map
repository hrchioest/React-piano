{"version":3,"sources":["notes/do.wav","notes/re.wav","notes/mi.wav","notes/fa.wav","notes/sol.wav","notes/la.wav","notes/si.wav","Key.js","listNotas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Key","estaSonando","nota","handleClick","handleKeyPress","className","nombre","onClick","onKeyPress","key","tieneSostenido","notas","link","require","App","useState","setEstaSonando","sonidoNota","Audio","play","setTimeout","event","find","useEffect","document","addEventListener","role","aria-label","map","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,sFCiB5BC,G,MAfH,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,eAC5C,OACE,oCACE,yBACEC,UAAS,eAAUJ,IAAgBC,EAAKI,QAAU,SAClDC,QAAS,kBAAMJ,EAAYD,IAC3BM,WAAYJ,GACZF,EAAKO,IACAP,EAAKQ,gBAAkB,yBAAKL,UAAU,cCkClCM,EA3CH,CACV,CACEL,OAAQ,KACRM,KAAMC,EAAQ,IACdH,gBAAgB,EAChBD,IAAI,KAEN,CACEH,OAAQ,KACRM,KAAMC,EAAQ,IACdH,gBAAgB,EAChBD,IAAI,KAEN,CACEH,OAAQ,KACRM,KAAMC,EAAQ,IACdJ,IAAI,KAEN,CACEH,OAAQ,KACRM,KAAMC,EAAQ,IACdH,gBAAgB,EAChBD,IAAI,KAEN,CACEH,OAAQ,MACRM,KAAMC,EAAQ,IACdH,gBAAgB,EAChBD,IAAI,KAEN,CACEH,OAAQ,KACRM,KAAMC,EAAQ,IACdH,gBAAgB,EAChBD,IAAI,KAEN,CACEH,OAAQ,KACRM,KAAMC,EAAQ,IACdJ,IAAI,MCmBKK,MAtDf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNd,EADM,KACOe,EADP,KAGPC,EAAY,SAACf,GACjBc,EAAed,EAAKI,QACL,IAAIY,MAAMhB,EAAKU,MACnBO,OACXC,YAAW,WACTJ,EAAe,MACd,MAGCb,EAAc,SAACD,GACnBe,EAAWf,IAGPE,EAAiB,SAACiB,GACtB,IAAMnB,EAAMS,EAAMW,MAAK,SAAApB,GAAI,OAAEA,EAAKO,MAAMY,EAAMZ,OAC1CP,GACDe,EAAWf,IAQhB,OALAqB,qBAAU,WACRC,SAASC,iBAAiB,WAAYrB,KAEtC,IAGA,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,4BAAI,0BAAMqB,KAAK,MAAMC,aAAW,OAA5B,8BAAJ,mBAAmE,0BAAMD,KAAK,MAAMC,aAAW,OAA5B,iBACnE,yCACY,0BAAMD,KAAK,QAAQC,aAAW,OAA9B,gBADZ,mCAGA,sIACA,yBACEtB,UAAU,gBAAgBJ,GAAW,0BAAuBA,EAAvB,QAEzC,yBAAKI,UAAU,cACZM,EAAMiB,KAAI,SAAC1B,EAAM2B,GAAP,OACT,kBAAC,EAAD,CACEpB,IAAKoB,EACL5B,YAAaA,EACbC,KAAMA,EACNC,YAAaA,EACbC,eAAgBA,UCtCR0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASc,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a631b6ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/do.18fd3f6f.wav\";","module.exports = __webpack_public_path__ + \"static/media/re.217b943a.wav\";","module.exports = __webpack_public_path__ + \"static/media/mi.1f26c778.wav\";","module.exports = __webpack_public_path__ + \"static/media/fa.a787534a.wav\";","module.exports = __webpack_public_path__ + \"static/media/sol.785a33d2.wav\";","module.exports = __webpack_public_path__ + \"static/media/la.10af03f3.wav\";","module.exports = __webpack_public_path__ + \"static/media/si.70924435.wav\";","import React from 'react';\n\nconst Key = ({estaSonando, nota, handleClick, handleKeyPress}) => {\n  return (\n    <>\n      <div\n        className={`nota ${estaSonando === nota.nombre && 'suena'}`}\n        onClick={() => handleClick(nota)}\n        onKeyPress={handleKeyPress}        \n      >{nota.key}\n            {nota.tieneSostenido && <div className=\"negra\"></div>}\n      </div>\n\n    </>\n  );\n};\n\nexport default Key;\n","\nconst notas = [\n    {\n      nombre: \"DO\",\n      link: require(\"./notes/do.wav\"),\n      tieneSostenido: true,\n      key:\"1\" \n    },\n    {\n      nombre: \"RE\",\n      link: require(\"./notes/re.wav\"),\n      tieneSostenido: true,\n      key:\"2\" \n    },\n    {\n      nombre: \"MI\",\n      link: require(\"./notes/mi.wav\"),\n      key:\"3\" \n    },\n    {\n      nombre: \"FA\",\n      link: require(\"./notes/fa.wav\"),\n      tieneSostenido: true,\n      key:\"4\" \n    },\n    {\n      nombre: \"SOL\",\n      link: require(\"./notes/sol.wav\"),\n      tieneSostenido: true,\n      key:\"5\" \n    },\n    {\n      nombre: \"LA\",\n      link: require(\"./notes/la.wav\"),\n      tieneSostenido: true,\n      key:\"6\" \n    },\n    {\n      nombre: \"SI\",\n      link: require(\"./notes/si.wav\"),\n      key:\"7\"\n    }\n  ];\n\n  export default notas;\n\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Key from \"./Key\";\nimport notas from \"./listNotas\";\n\nfunction App() {\n  const [estaSonando, setEstaSonando] = useState(\"\");\n  \n  const sonidoNota =(nota)=>{\n    setEstaSonando(nota.nombre);\n    const sonido = new Audio(nota.link);\n        sonido.play();\n    setTimeout(() => {\n      setEstaSonando(\"\");\n    }, 350);\n  }\n\n  const handleClick = (nota) => {\n    sonidoNota(nota)    \n  };  \n\n  const handleKeyPress = (event) =>{\n    const nota =notas.find(nota=>nota.key===event.key)\n    if (nota){\n       sonidoNota(nota)\n    }\n  }\n  useEffect(()=>{\n    document.addEventListener('keypress', handleKeyPress);\n\n  },[])\n\n  return (\n    <div className=\"App\">\n      <div className=\"titulo\">\n        <h1><span role=\"img\" aria-label=\"img\">🎶 🎹 </span>Piano con React <span role=\"img\" aria-label=\"img\">🎶</span></h1>\n        <h2>\n          Hecho con <span role=\"icono\" aria-label=\"img\">❤️</span> por Rocío gracias a Ada ITW\n        </h2>\n        <p> Nota: Se puede tocar con click o presionando los números desde el 1 al 7 por cada nota 😉</p>\n        <div \n          className=\"esta-sonando\">{estaSonando && `Suena la nota \" ${estaSonando} \"`}</div>\n      </div>\n      <div className=\"contenedor\">\n        {notas.map((nota, i) => (\n          <Key\n            key={i}\n            estaSonando={estaSonando}\n            nota={nota}\n            handleClick={handleClick}\n            handleKeyPress={handleKeyPress}\n\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}